{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCtBA,eAEA,oBAAyBQ,GACvB,IAAIC,EAAeC,EAAOC,OAAOC,iBAC7BC,GAAY,EAGhB,MAAMC,EAAsBJ,EAAOC,OAAOI,oBACxCL,EAAOM,mBAAmBC,MAC1B,KAEFH,EAAoBI,QAAU,sBAC9BJ,EAAoBK,QAAU,8BAC9BL,EAAoBM,KAAOP,EAAY,UAAY,WACnDC,EAAoBO,OACpBb,EAAQc,cAAcC,KAAKT,GAG3B,IAAIU,EAASd,EAAOe,UAAUC,iBAAiB,2BAC3CC,EAAkBH,EAAOI,IAC3B,kBACA,2BAIEC,EAAoBnB,EAAOC,OAAOmB,+BAA+B,CACnEH,gBAAiBA,IAYnB,MAAMI,EAAgBrB,EAAOsB,SAASC,gBACpC,uBACA,KACEpB,GAAaA,EAVfC,EAAoBM,KAAOP,EAAY,UAAY,WACnDC,EAAoBoB,MAAQrB,OACxBP,EACA,2BASF6B,GAAmB,IAMvB,SAASA,IACP,IAAK1B,IAAiBI,EACpB,OAGF,MACMuB,EAA6C,GACnD,IAAIC,EAFS5B,EAAa6B,SAASC,UAElBC,MAAM,MACnBC,GAAiB,EACjBC,EAA0C,KAE9C,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAAK,CACrC,IAAIE,EAAOR,EAAMM,GAQjB,GANI,WAAWG,KAAKD,KAElBJ,GAAiB,EACjBC,EAAkB,IAAIhC,EAAOqC,SAASJ,EAAGE,EAAKG,OAAO,cAGnDP,EAAgB,CAClB,IAAIQ,EAAU,IAAIvC,EAAOqC,SAASJ,EAAGE,EAAKD,QAC1C,MAAMM,EAAa,CACjBC,MAAO,IAAIzC,EAAO0C,MAAMV,EAAkBO,GAC1CI,aAAc,aAEhBjB,EAAeb,KAAK2B,E,CAGlBL,EAAKS,SAAS,QAChBb,GAAiB,E,CAIrBhC,EAAa8C,eAAe1B,EAAmBO,EACjD,CArCA5B,EAAQc,cAAcC,KAAKQ,GAuCvBtB,GACF0B,IAGFzB,EAAOe,UAAU+B,0BAA0BC,IACrCA,EAAMC,qBAAqB,6CAC7BlC,EAASd,EAAOe,UAAUC,iBAAiB,2BAC3CC,EAAkBH,EAAOI,IACvB,kBACA,2BAEFC,EAAkB8B,UAClB9B,EAAoBnB,EAAOC,OAAOmB,+BAA+B,CAC/DH,gBAAiBA,IAEnBQ,I,IAIJzB,EAAOC,OAAOiD,6BACXC,IACCpD,EAAeoD,EACXA,GACF1B,G,GAGJ,KACA3B,EAAQc,eAGVZ,EAAOe,UAAUqC,yBACdL,IACKhD,GAAgBgD,EAAMnB,WAAa7B,EAAa6B,UAClDH,G,GAGJ,KACA3B,EAAQc,cAEZ,EAEA,wBAA8B,C","sources":["webpack://php-codeblock-highlighter/external commonjs \"vscode\"","webpack://php-codeblock-highlighter/webpack/bootstrap","webpack://php-codeblock-highlighter/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  let activeEditor = vscode.window.activeTextEditor;\r\n  let isEnabled = true;\r\n\r\n  // Create and show a status bar item\r\n  const toggleStatusBarItem = vscode.window.createStatusBarItem(\r\n    vscode.StatusBarAlignment.Right,\r\n    100\r\n  );\r\n  toggleStatusBarItem.command = \"togglePHPBackground\";\r\n  toggleStatusBarItem.tooltip = \"Toggle PHP Background Color\";\r\n  toggleStatusBarItem.text = isEnabled ? \"[ðŸŽ¨ ON]\" : \"[ðŸŽ¨ OFF]\";\r\n  toggleStatusBarItem.show();\r\n  context.subscriptions.push(toggleStatusBarItem);\r\n\r\n  // Get the configuration for the background color\r\n  let config = vscode.workspace.getConfiguration(\"phpCodeblockHighlighter\");\r\n  let backgroundColor = config.get(\r\n    \"backgroundColor\",\r\n    \"rgba(50, 120, 200, 0.5)\"\r\n  );\r\n\r\n  // Create a text editor decoration type for the PHP code blocks\r\n  let phpDecorationType = vscode.window.createTextEditorDecorationType({\r\n    backgroundColor: backgroundColor,\r\n  });\r\n\r\n  // Update the status bar item based on the 'isEnabled' flag\r\n  function updateStatusBarItem() {\r\n    toggleStatusBarItem.text = isEnabled ? \"[ðŸŽ¨ ON]\" : \"[ðŸŽ¨ OFF]\";\r\n    toggleStatusBarItem.color = isEnabled\r\n      ? undefined\r\n      : \"rgba(255, 255, 255, 0.5)\";\r\n  }\r\n\r\n  // Toggle the isEnabled flag and update the decorations\r\n  const toggleCommand = vscode.commands.registerCommand(\r\n    \"togglePHPBackground\",\r\n    () => {\r\n      isEnabled = !isEnabled;\r\n      updateStatusBarItem();\r\n      updateDecorations();\r\n    }\r\n  );\r\n\r\n  context.subscriptions.push(toggleCommand);\r\n\r\n  function updateDecorations() {\r\n    if (!activeEditor || !isEnabled) {\r\n      return;\r\n    }\r\n\r\n    const text = activeEditor.document.getText();\r\n    const phpDecorations: vscode.DecorationOptions[] = [];\r\n    let lines = text.split(/\\n/);\r\n    let insidePhpBlock = false;\r\n    let openTagPosition: vscode.Position | null = null;\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      let line = lines[i];\r\n\r\n      if (/\\<\\?php/i.test(line)) {\r\n        // Case-insensitive match for PHP opening tag\r\n        insidePhpBlock = true;\r\n        openTagPosition = new vscode.Position(i, line.search(/\\<\\?php/i));\r\n      }\r\n\r\n      if (insidePhpBlock) {\r\n        let lineEnd = new vscode.Position(i, line.length);\r\n        const decoration = {\r\n          range: new vscode.Range(openTagPosition!, lineEnd),\r\n          hoverMessage: \"PHP block\",\r\n        };\r\n        phpDecorations.push(decoration);\r\n      }\r\n\r\n      if (line.includes(\"?>\")) {\r\n        insidePhpBlock = false;\r\n      }\r\n    }\r\n\r\n    activeEditor.setDecorations(phpDecorationType, phpDecorations);\r\n  }\r\n\r\n  if (activeEditor) {\r\n    updateDecorations();\r\n  }\r\n\r\n  vscode.workspace.onDidChangeConfiguration((event) => {\r\n    if (event.affectsConfiguration(\"phpCodeblockHighlighter.backgroundColor\")) {\r\n      config = vscode.workspace.getConfiguration(\"phpCodeblockHighlighter\");\r\n      backgroundColor = config.get(\r\n        \"backgroundColor\",\r\n        \"rgba(50, 120, 200, 0.5)\"\r\n      );\r\n      phpDecorationType.dispose();\r\n      phpDecorationType = vscode.window.createTextEditorDecorationType({\r\n        backgroundColor: backgroundColor,\r\n      });\r\n      updateDecorations();\r\n    }\r\n  });\r\n\r\n  vscode.window.onDidChangeActiveTextEditor(\r\n    (editor) => {\r\n      activeEditor = editor;\r\n      if (editor) {\r\n        updateDecorations();\r\n      }\r\n    },\r\n    null,\r\n    context.subscriptions\r\n  );\r\n\r\n  vscode.workspace.onDidChangeTextDocument(\r\n    (event) => {\r\n      if (activeEditor && event.document === activeEditor.document) {\r\n        updateDecorations();\r\n      }\r\n    },\r\n    null,\r\n    context.subscriptions\r\n  );\r\n}\r\n\r\nexport function deactivate() {}\r\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","activeEditor","vscode","window","activeTextEditor","isEnabled","toggleStatusBarItem","createStatusBarItem","StatusBarAlignment","Right","command","tooltip","text","show","subscriptions","push","config","workspace","getConfiguration","backgroundColor","get","phpDecorationType","createTextEditorDecorationType","toggleCommand","commands","registerCommand","color","updateDecorations","phpDecorations","lines","document","getText","split","insidePhpBlock","openTagPosition","i","length","line","test","Position","search","lineEnd","decoration","range","Range","hoverMessage","includes","setDecorations","onDidChangeConfiguration","event","affectsConfiguration","dispose","onDidChangeActiveTextEditor","editor","onDidChangeTextDocument"],"sourceRoot":""}